using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Drawing;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Windows.Forms;

namespace CSharpProjectEulerForm
{
    public partial class Form1 : Form
    {
        public Form1()
        {
            InitializeComponent();
        }

        IProblem prob = new ProblemSolver();

        DateTime StartDate;

        DateTime EndDate;

        public void FuncCaller(Func<long, long> func, long num)
        {
            StartDate = DateTime.Now;

            var answer = func(num);

            EndDate = DateTime.Now;

            txtSonuc.Text = answer.ToString();

            txtSure.Text = ((int)(EndDate-StartDate).TotalMilliseconds).ToString() + " miliseconds";
        }

        public void FuncCaller(Func<int, long> func, int num)
        {
            StartDate = DateTime.Now;

            var answer = func(num);

            EndDate = DateTime.Now;

            txtSonuc.Text = answer.ToString();

            txtSure.Text = ((int)(EndDate - StartDate).TotalMilliseconds).ToString() + " miliseconds";
        }

        public void FuncCaller(Func<string, int, long> func, string serie, int num)
        {
            StartDate = DateTime.Now;

            var answer = func(serie, num);

            EndDate = DateTime.Now;

            txtSonuc.Text = answer.ToString();

            txtSure.Text = ((int)(EndDate - StartDate).TotalMilliseconds).ToString() + " miliseconds";
        }

        public void FuncCaller(Func<int, int> func, int num)
        {
            StartDate = DateTime.Now;

            var answer = func(num);

            EndDate = DateTime.Now;

            txtSonuc.Text = answer.ToString();

            txtSure.Text = ((int)(EndDate - StartDate).TotalMilliseconds).ToString() + " miliseconds";
        }

        public void FuncCaller(Func<int> func)
        {
            StartDate = DateTime.Now;

            var answer = func();

            EndDate = DateTime.Now;

            txtSonuc.Text = answer.ToString();

            txtSure.Text = ((int)(EndDate - StartDate).TotalMilliseconds).ToString() + " miliseconds";
        }

        public void FuncCaller(Func<int, int, long> func, int start, int end)
        {
            StartDate = DateTime.Now;

            var answer = func(start, end);

            EndDate = DateTime.Now;

            txtSonuc.Text = answer.ToString();

            txtSure.Text = ((int)(EndDate - StartDate).TotalMilliseconds).ToString() + " miliseconds";
        }

        private void btnProblem_1_Click(object sender, EventArgs e)
        {
            txtSoru.Text = "If we list all the natural numbers below 10 that are multiples of 3 or 5, we get 3, 5, 6 and 9. The sum of these multiples is 23." 
                + Environment.NewLine
                + "Find the sum of all the multiples of 3 or 5 below 1000.";
            FuncCaller(prob.SumOfMultiples, 1000);
        }

        private void btnProblem_2_Click(object sender, EventArgs e)
        {
            txtSoru.Text = "Each new term in the Fibonacci sequence is generated by adding the previous two terms. By starting with 1 and 2, the first 10 terms will be:"
               + Environment.NewLine
               + "1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ..."
               + Environment.NewLine
               + "By considering the terms in the Fibonacci sequence whose values do not exceed four million, find the sum of the even-valued terms."; 
            FuncCaller(prob.SumOfEvenNumbersInFibonacci, 4000000);
        }

        private void btnProblem_3_Click(object sender, EventArgs e)
        {
            txtSoru.Text = "The prime factors of 13195 are 5, 7, 13 and 29."
                + Environment.NewLine
                + "What is the largest prime factor of the number 600851475143 ?";
            FuncCaller(prob.LargestPrimeFactor, 600851475143);
        }

        private void btnProblem_4_Click(object sender, EventArgs e)
        {
            txtSoru.Text = "A palindromic number reads the same both ways. The largest palindrome made from the product of two 2-digit numbers is 9009 = 91 × 99."
                + Environment.NewLine
                + "Find the largest palindrome made from the product of two 3-digit numbers.";
            FuncCaller(prob.LargestPalindrome);
        }

        private void btnProblem_5_Click(object sender, EventArgs e)
        {
            txtSoru.Text = "2520 is the smallest number that can be divided by each of the numbers from 1 to 10 without any remainder."
                + Environment.NewLine
                + "What is the smallest positive number that is evenly divisible by all of the numbers from 1 to 20?";
            FuncCaller(prob.SmallestEvenlyDivisibleNum, 1, 20);
        }

        private void btnProblem_6_Click(object sender, EventArgs e)
        {
            txtSoru.Text = "The sum of the squares of the first ten natural numbers is,"
                + Environment.NewLine
                + "1^2 + 2^2 + ... + 10^2 = 385"
                + Environment.NewLine
                + "The square of the sum of the first ten natural numbers is,"
                + "(1 + 2 + ... + 10)^2 = 55^2 = 3025"
                + Environment.NewLine
                + "Hence the difference between the sum of the squares of the first ten natural numbers and the square of the sum is 3025 - 385 = 2640."
                + Environment.NewLine
                + "Find the difference between the sum of the squares of the first one hundred natural numbers and the square of the sum.";
            FuncCaller(prob.SumSquareDifference, (long)100);
        }

        private void btnProblem_7_Click(object sender, EventArgs e)
        {
            txtSoru.Text = "By listing the first six prime numbers: 2, 3, 5, 7, 11, and 13, we can see that the 6th prime is 13."
                + Environment.NewLine
                + "What is the 10 001st prime number?";
            FuncCaller(prob.FindPrimeNumber, 10001);
        }

        private void btnProblem_8_Click(object sender, EventArgs e)
        {
            string serie = "7316717653133062491922511967442657474235534919493496983520312774506326239578318016984801869478851843858615607891129494954595017379583319528532088055111254069874715852386305071569329096329522744304355766896648950445244523161731856403098711121722383113622298934233803081353362766142828064444866452387493035890729629049156044077239071381051585930796086670172427121883998797908792274921901699720888093776657273330010533678812202354218097512545405947522435258490771167055601360483958644670632441572215539753697817977846174064955149290862569321978468622482839722413756570560574902614079729686524145351004748216637048440319989000889524345065854122758866688116427171479924442928230863465674813919123162824586178664583591245665294765456828489128831426076900422421902267105562632111110937054421750694165896040807198403850962455444362981230987879927244284909188845801561660979191338754992005240636899125607176060588611646710940507754100225698315520005593572972571636269561882670428252483600823257530420752963450";
            txtSoru.Text = "The four adjacent digits in the 1000-digit number that have the greatest product are 9 × 9 × 8 × 9 = 5832."
                + Environment.NewLine
                + @"73167176531330624919225119674426574742355349194934
96983520312774506326239578318016984801869478851843
85861560789112949495459501737958331952853208805511
12540698747158523863050715693290963295227443043557
66896648950445244523161731856403098711121722383113
62229893423380308135336276614282806444486645238749
30358907296290491560440772390713810515859307960866
70172427121883998797908792274921901699720888093776
65727333001053367881220235421809751254540594752243
52584907711670556013604839586446706324415722155397
53697817977846174064955149290862569321978468622482
83972241375657056057490261407972968652414535100474
82166370484403199890008895243450658541227588666881
16427171479924442928230863465674813919123162824586
17866458359124566529476545682848912883142607690042
24219022671055626321111109370544217506941658960408
07198403850962455444362981230987879927244284909188
84580156166097919133875499200524063689912560717606
05886116467109405077541002256983155200055935729725
71636269561882670428252483600823257530420752963450"
                + Environment.NewLine
                + "Find the thirteen adjacent digits in the 1000-digit number that have the greatest product. What is the value of this product?";
            FuncCaller(prob.LargestProductInASeries, serie, 13);
        }

        private void btnProblem_9_Click(object sender, EventArgs e)
        {
            txtSoru.Text = @"A Pythagorean triplet is a set of three natural numbers, a < b < c, for which,

a2 + b2 = c2
For example, 32 + 42 = 9 + 16 = 25 = 52.

There exists exactly one Pythagorean triplet for which a +b + c = 1000.
Find the product abc.";

            FuncCaller(prob.SpecialPythagoreanTriplet, 1000);
        }

        private void btnProblem_10_Click(object sender, EventArgs e)
        {
            txtSoru.Text = @"The sum of the primes below 10 is 2 + 3 + 5 + 7 = 17.

Find the sum of all the primes below two million.";

            FuncCaller(prob.SumOfPrimeNumbersToLimit, (long)2000000);
        }
    }
}
